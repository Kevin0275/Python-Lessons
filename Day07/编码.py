# 美国使用的是ASCII编码，一共使用了127个数字来映射符号，不过由于规定1B = 8b，所以最高位留空

# 由于中文较为复杂，中国自己开发了一套叫做GBK的编码格式

# 然而由于地区之间不统一，UNICODE被发明出来，使用4个字节来表示

# 但是UNICODE存在问题，统一使用4个字节会让存储需求量变大，所以有人发明的可变长的UTF-8.

'''
Python提供了多种编码格式，一般选择特定的编码格式就会用特定的编码储存到磁盘上，但是不同的格式可能在不同的
打开方式中存在出现乱码问题
'''

# 请注意：编码只是针对于字符串而设立，所以，对于encode函数，也只有字符串才会生效
s = '你是谁'
s = s.encode('utf-8')   # 在不明确的时候，默认为UTF-8编码方式

print(s, type(s))   # b'\xe4\xbd\xa0\xe6\x98\xaf\xe8\xb0\x81' <class 'bytes'>
# 在UTF-8中，一个汉字对应的是三个字节

# 字节的两个用处：磁盘存储和网络传输
# 解码：字节对象.decode(解码方式)

print(s.decode('utf-8'))    # 你是谁

